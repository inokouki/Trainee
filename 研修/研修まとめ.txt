****////    Java全般     ////****

同プロジェクト内でクラスが被っていた。
プロパティ→実行の構成、からコマンドライン引数を指定できる
HashMapの使い方
配列の要素数が2つなら、変数ではなく0と1の定数のほうがいい
splitで"."を使うときは、"\\."と記述する(.はワイルドカードの意味)
整数値はint型だけではない
変数のscopeを意識してコーディングする
メソッド名は動詞、変数などは名詞を使用する
可読性を上げる(読みやすさ、メソッド間の追いかけやすさ、1行の短さ)
変数名はファイル名を用いたりして統一
if文の条件式が複数ある場合は、[要素数]→[比較]の順番のほうがいい
変数は小文字でスタート
Exceptionが複数ある場合は、全て同時発生ではなくて、先に来た物から発生している
String同士の比較は"=="でいいが、ObjectからStringにキャストした場合はequalsメソッドを使って比較する

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

****////    JSP & サーブレット     ////****

JSP→Servlet(大まかに指示を出す)→Service(細かい処理)→Dao(SQL文などの処理)→DBの流れ
tomcatが起動しないときは、urlPatternが被っていないか、プロジェクトの追加・除去でどのプロジェクトファイルが引っかかっているか調べる
DBの命名規約に気をつける。
<input type="hidden">を使えばJSPの裏で値を飛ばせる
勉強するときは動くサンプルを作る→1文字わざとミスする→発生したエラーの場所や範囲を確認する
混同する恐れがあるので、変数名にもメソッド名にも_は使わないほうがいい

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

****////      Junitテスト      ////****

テストファイルのメソッド名は、日本語にしてできるだけわかりやすく記述する
テストケースは境界値(テストする値の前後)も含めて考える
exceptionを予想っしてスローするテストケースもあればなお良し(失敗を想定したテストケース)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

****////       Springフレームワーク       ////****

eclipseにstsプラグインを導入して使用する(Maven)
JSP⇔Controllerで値の受け渡し
プロジェクトファイルをtomcat経由で実行するには、プロジェクトをリフレッシュする必要がある
JSPから飛ばした値は、[@RequestParam("jspで指定したpath") 型 変数名]で取得する
DBとの接続はJdbcTemplateクラスを使う
アノテーションバリデーションは@Validをメソッドの引数に追加し、次の引数にBindingResultの型で取得する
DB接続は、ControllerではなくDaoで処理する(controllerは必要な情報を集めて、どこで処理するか、という指示を出すまでが処理範囲　・　controllerのコードも長くなる(fat controller))
JSPで画像を表示するには、mvc-xmlに<mvc:resources mapping="〜〜" location="WEB-INF/image" />のような宣言を追加する必要がある

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

****////       Seasar2フレームワーク       ////****

既存のプロジェクトを動的Webプロジェクトにするには、[プロパティ→プロジェクト・ファセット→ファセットフォームに変換→動的Webモジュールにチェック]で、できる
[デプロイメントアセンブリ→追加・フォルダ→コンテンツ格納ディレクトリを選択(/src/main/webapp)]した後に/WebContentフォルダを除去する
DBとの接続はS2JDBCを用いて行う。Actionクラス上で行っていい。
Entityにアノテーションを使って変数を定義していく
JSP⇔Actionで値の受け渡し
Actionにあるpublic宣言された変数は[f:h(変数)]からJSPで使える

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////